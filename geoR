<?php

defined('BASEPATH') OR exit('No direct script access allowed');

// This can be removed if you use __autoload() in config.php OR use Modular Extensions
require APPPATH . 'libraries/REST_Controller.php';
date_default_timezone_set('America/La_Paz');

/**
 * This is an example of a few basic user interaction methods you could use
 * all done with a hardcoded array
 *
 * @package         CodeIgniter
 * @subpackage      Rest Server
 * @category        Controller
 * @author          Phil Sturgeon, Chris Kacerguis
 * @license         MIT
 * @link            https://github.com/chriskacerguis/codeigniter-restserver
 */
class Geo extends REST_Controller {

    function __construct()
    {
        // Construct the parent class
        parent::__construct();

        // Configure limits on our controller methods
        // Ensure you have created the 'limits' table and enabled 'limits' within application/config/rest.php
        $this->methods['user_get']['limit'] = 500; // 500 requests per hour per user/key
        $this->methods['user_post']['limit'] = 100; // 100 requests per hour per user/key
        $this->methods['user_delete']['limit'] = 50; // 50 requests per hour per user/key

        //$this->methods['invitado_get']['limit'] = 50; // 50 requests per hour per user/key
    }

    public function sha_get()
    {
        $pwd = $this->get('pwd');
        $hash = sha1($pwd);
        $this->set_response([
            'status' => TRUE,
            'data' => $hash
        ], REST_Controller::HTTP_OK);
    }

    public function users_get()
    {
        // Users from a data store e.g. database
        $users = [
            ['id' => 1, 'name' => 'John', 'email' => 'john@example.com', 'fact' => 'Loves coding'],
            ['id' => 2, 'name' => 'Jim', 'email' => 'jim@example.com', 'fact' => 'Developed on CodeIgniter'],
            ['id' => 3, 'name' => 'Jane', 'email' => 'jane@example.com', 'fact' => 'Lives in the USA', ['hobbies' => ['guitar', 'cycling']]],
        ];

        $id = $this->get('id');

        // If the id parameter doesn't exist return all the users

        if ($id === NULL)
        {
            // Check if the users data store contains users (in case the database result returns NULL)
            if ($users)
            {
                // Set the response and exit
                $this->response($users, REST_Controller::HTTP_OK); // OK (200) being the HTTP response code
            }
            else
            {
                // Set the response and exit
                $this->response([
                    'status' => FALSE,
                    'message' => 'No users were found'
                ], REST_Controller::HTTP_OK); // NOT_FOUND (404) being the HTTP response code
            }
        }

        // Find and return a single record for a particular user.

        $id = (int) $id;

        // Validate the id.
        if ($id <= 0)
        {
            // Invalid id, set the response and exit.
            $this->response(NULL, REST_Controller::HTTP_BAD_REQUEST); // BAD_REQUEST (400) being the HTTP response code
        }

        // Get the user from the array, using the id as key for retreival.
        // Usually a model is to be used for this.

        $user = NULL;

        if (!empty($users))
        {
            foreach ($users as $key => $value)
            {
                if (isset($value['id']) && $value['id'] === $id)
                {
                    $user = $value;
                }
            }
        }

        if (!empty($user))
        {
            $this->set_response($user, REST_Controller::HTTP_OK); // OK (200) being the HTTP response code
        }
        else
        {
            $this->set_response([
                'status' => FALSE,
                'message' => 'User could not be found'
            ], REST_Controller::HTTP_OK); // NOT_FOUND (404) being the HTTP response code
        }
    }

    public function users_post()
    {
        // $this->some_model->update_user( ... );
        $message = [
            'id' => 100, // Automatically generated by the model
            'name' => $this->post('name'),
            'email' => $this->post('email'),
            'message' => 'Added a resource'
        ];

        $this->set_response($message, REST_Controller::HTTP_CREATED); // CREATED (201) being the HTTP response code
    }

    public function users_delete()
    {
        $id = (int) $this->get('id');

        // Validate the id.
        if ($id <= 0)
        {
            // Set the response and exit
            $this->response(NULL, REST_Controller::HTTP_BAD_REQUEST); // BAD_REQUEST (400) being the HTTP response code
        }

        // $this->some_model->delete_something($id);
        $message = [
            'id' => $id,
            'message' => 'Deleted the resource'
        ];

        $this->set_response($message, REST_Controller::HTTP_NO_CONTENT); // NO_CONTENT (204) being the HTTP response code
    }

    public function parameters_get()
    {
        
        $this->load->database();

        /*
        $cliente_id = $this->get('client_id');
        $token = $this->get('token');

        if ( ($cliente_id != NULL) && ($token != NULL) ) {
            $valid = $this->validate_token($token,$cliente_id);
            if (!$valid) {
                $this->response([
                    'status' => FALSE,
                    'message' => 'Token inv치lido'
                ], REST_Controller::HTTP_OK);
            }
        } else {
            $this->response([
                'status' => FALSE,
                'message' => 'Token inv치lido'
            ], REST_Controller::HTTP_OK);
        }
        */

        $query = $this->db->query('SELECT id,nombre value FROM ciudad');
        $ciudades = $query->result_array();

        $query = $this->db->query('SELECT id,nombre value FROM sexo');
        $sexos = $query->result_array();

        $query = $this->db->query('SELECT id, nombre value FROM asunto WHERE tipo_cliente = 1');
        $asuntosusu = $query->result_array();

        $query = $this->db->query('SELECT id, nombre value FROM asunto WHERE tipo_cliente = 2');
        $asuntoscom = $query->result_array();

        $query = $this->db->query('SELECT id, nombre value FROM banco');
        //$query = $this->db->query('SELECT id, nombre value FROM banco_nuevo');
        $bancos = $query->result_array();

        $query = $this->db->query('SELECT id, nombre value FROM moneda');
        $monedas = $query->result_array();

        $query = $this->db->query('SELECT id, nombre value FROM servicio');
        //$query = $this->db->query('SELECT id, descripcion value FROM servicio');
        $servicios = $query->result_array();

        $parametros['cities'] = $ciudades;
        $parametros['genders'] = $sexos;
        $parametros['subjects_user'] = $asuntosusu;
        $parametros['subjects_comm'] = $asuntoscom;
        $parametros['banks'] = $bancos;
        $parametros['currencies'] = $monedas;
        $parametros['services'] = $servicios;

        $this->response([
            'status' => TRUE,
            'data' => $parametros
        ], REST_Controller::HTTP_OK); // OK (200) being the HTTP response code

        
        
    }

    private function validate_token($tok,$id) {
        $this->load->database();
        //$query = $this->db->query('SELECT * FROM token where token="'.$tok.'" and usuario_id='.$id);
        $query = $this->db->query('select strcmp((SELECT token FROM token where cliente_id='.$id.' order by id DESC limit 1), "'.$tok.'") as resp');
        $respuesta = $query->row_array(); //print_r($respuesta);
        $resp = $respuesta['resp']; //echo 'Respuesta:'.$resp;

        $query2 = $this->db->query('select strcmp((SELECT token FROM token where device_id='.$id.' order by id DESC limit 1), "'.$tok.'") as resp');
        $respuesta2 = $query->row_array(); //print_r($respuesta);
        $resp2 = $respuesta2['resp']; //echo 'Respuesta:'.$resp;

        if ($resp == 0) {
            return TRUE;
        } else if ($resp2 == 0) {
            return TRUE;
        } else {
            return FALSE;
        }
    }

    private function create_token($usr,$id) {
        $tok = md5(uniqid($usr, true));
        $this->load->database();
        $data = array(
           'token' => $tok,
           'cliente_id' => $id,
           'fecha_ini' => date('Y-m-d H:i:s')
        );
        //$this->db->where('id', $registro['id']);
        $this->db->insert('token', $data);
        return $tok;
    }

    private function create_token_jump($device_id) {
        $tok = md5(uniqid($device_id));
        $this->load->database();
        $data = array(
           'token' => $tok,
           'device_id' => $device_id,
           'fecha_ini' => date('Y-m-d H:i:s')
        );
        //$this->db->where('id', $registro['id']);
        $this->db->insert('token', $data);
        return $tok;
    }

    public function login_get()
    {
        
        $this->load->database();

        $email = $this->get('email');
        $pwd = $this->get('pwd');
        $device_id = $this->get('device_id');
        $user_agent = $this->get('user_agent');

        // If the id parameter doesn't exist return all the users

        if ( ($email === NULL) || ($pwd === NULL) )
        {
            // Set the response and exit
            $this->response([
                'status' => FALSE,
                'message' => 'Par치metros inv치lidos'
            ], REST_Controller::HTTP_OK); // NOT_FOUND (404) being the HTTP response code
        }

        //$pwd = sha1($pwd);
        $query = 'SELECT c.id client_id,email,d.nombre city,fecha_nacimiento birthdate,sexo gender,facebook_id from cliente c, ciudad d where email="'.$email.'" and clave="'.$pwd.'" and c.ciudad_id = d.id order by c.id desc limit 1';
        $result = $this->db->query($query);

        //$query = $this->db->query('SELECT c.id client_id,email,d.nombre city,fecha_nacimiento birthdate,sexo gender,facebook_id from cliente c, ciudad d where email="'.$email.'" and clave="'.$pwd.'" and c.ciudad_id = d.id');
        $cliente = $result->row_array();
        if (!empty($cliente)) {
            $token = $this->create_token($email,$cliente['client_id']);
            if ($cliente['gender'] == 1) {
                $cliente['gender'] = 'Hombre';
            } else {
                $cliente['gender'] = 'Mujer';
            }
            $cliente['token'] = $token;

            // Guardar el Device Id del dispositivo del cliente
            if ( $device_id != NULL ) {
                $data = array(
                        'device_id' => $device_id
                );
                $this->db->where('id', $cliente['client_id']);
                $this->db->update('cliente', $data);
            }
            $cliente['device_id'] = $device_id;

            // Guardar el User Agent del dispositivo del cliente
            if ( $user_agent != NULL ) {
                $data = array(
                        'user_agent' => $user_agent
                );
                $this->db->where('id', $cliente['client_id']);
                $this->db->update('cliente', $data);
            }
            $cliente['device_id'] = $device_id;

            // **** Insert en la tabla log_servicios
            $data = array(
                'cliente_id' => $cliente['client_id'],
                'fecha'  => date('Y-m-d H:i:s'),
                'servicio' => 'login_get',
                'parametros'  => json_encode($_GET),
                'query' => $query,
                'respuesta' => json_encode($cliente),
                'registros' => sizeof($cliente)
            );
            $result_log = $this->db->insert('log_servicios', $data);

            $this->set_response([
                'status' => TRUE,
                'data' => $cliente
            ], REST_Controller::HTTP_OK); // OK (200) being the HTTP response code
        } else {
            $this->set_response([
                'status' => FALSE,
                'message' => 'No se encontr칩 al cliente'
            ], REST_Controller::HTTP_OK); // NOT_FOUND (404) being the HTTP response code
        }
        
    }


    public function forgotpwd_get()
    {
        
        $this->load->database();

        $email = $this->get('email');
        

        // If the id parameter doesn't exist return all the users

        if ( $email === NULL )
        {
            // Set the response and exit
            $this->response([
                'status' => FALSE,
                'message' => 'Par치metros inv치lidos'
            ], REST_Controller::HTTP_OK); // NOT_FOUND (404) being the HTTP response code
        }

        //$pwd = sha1($pwd);
        $query = 'SELECT c.id client_id,email,d.nombre city,fecha_nacimiento birthdate,sexo gender,facebook_id from cliente c, ciudad d where email="'.$email.'" and c.ciudad_id = d.id order by c.id desc limit 1';
        $result = $this->db->query($query);

        //$query = $this->db->query('SELECT c.id client_id,email,d.nombre city,fecha_nacimiento birthdate,sexo gender,facebook_id from cliente c, ciudad d where email="'.$email.'" and clave="'.$pwd.'" and c.ciudad_id = d.id');
        $cliente = $result->row_array();
        if (!empty($cliente)) {

            $nuevaclave = rand(1000, 9999);

            $result = $this->send_html_email($email, $nuevaclave);
            if ($result) {
                $resultado = "Nueva clave enviada";
            } else {
                $resultado = "Error en env칤o de clave";
            }

            // **** Insert en la tabla log_servicios
            $data = array(
                'cliente_id' => $cliente['client_id'],
                'fecha'  => date('Y-m-d H:i:s'),
                'servicio' => 'forgotpwd_get',
                'parametros'  => $email.'-'.$nuevaclave,
                'query' => '',
                'respuesta' => $resultado,
                'registros' => 0
            );
            $result_log = $this->db->insert('log_servicios', $data);

            $respuesta = array(
                'status' => true,
                'message' => $resultado
            );

            $this->set_response([
                'status' => TRUE,
                'data' => $respuesta
            ], REST_Controller::HTTP_OK); // OK (200) being the HTTP response code
        } else {
            $this->set_response([
                'status' => FALSE,
                'message' => 'No se encontr칩 al cliente'
            ], REST_Controller::HTTP_OK); // NOT_FOUND (404) being the HTTP response code
        }
        
    }

    public function register_post()
    {

        if ( ($this->post('email') === NULL) || ($this->post('city') === NULL) )
        {
            // Set the response and exit
            $this->response([
                'status' => FALSE,
                'message' => 'Debe ingresar un email y una ciudad'
            ], REST_Controller::HTTP_OK); // NOT_FOUND (404) being the HTTP response code
        }
        if ( ($this->post('birthdate') === NULL) || ($this->post('gender') === NULL) )
        {
            // Set the response and exit
            $this->response([
                'status' => FALSE,
                'message' => 'Debe ingresar una fecha de cumplea침os y el g칠nero'
            ], REST_Controller::HTTP_OK); // NOT_FOUND (404) being the HTTP response code
        }
        if ( ($this->post('password') === NULL) )
        {
            // Set the response and exit
            $this->response([
                'status' => FALSE,
                'message' => 'Debe ingresar una clave'
            ], REST_Controller::HTTP_OK); // NOT_FOUND (404) being the HTTP response code
        }

        $user_agent = $this->get('user_agent');

        /*
        if ( ($this->post('device_id') === NULL) )
        {
            // Set the response and exit
            $this->response([
                'status' => FALSE,
                'message' => 'Debe ingresar un Device Id'
            ], REST_Controller::HTTP_OK); 
        }
        */

        $this->load->database();

        // **** Insert en la tabla Cliente
        $data = array(
            'email'  => $this->post('email'),
            'fecha_nacimiento' => $this->post('birthdate'),
            'sexo'  => $this->post('gender'),
            'ciudad_id'  => $this->post('city'),
            'clave'  => $this->post('password'),
            'device_id'  => $this->post('device_id'),
            'fecha_registro' => date('Y-m-d H:i:s')
        );
        $result = $this->db->insert('cliente', $data);
        $last_cli = $this->db->insert_id(); //echo 'last_cli:'.$last_cli;

        // Guardar el User Agent del dispositivo del cliente
        if ( $user_agent != NULL ) {
            $data = array(
                    'user_agent' => $user_agent
            );
            $this->db->where('id', $last_cli);
            $this->db->update('cliente', $data);
        }

        if ($result) {
            $cliente['client_id'] = $last_cli;
            $cliente['email'] = $data['email'];
            $cliente['birthday'] = $data['fecha_nacimiento'];
            $cliente['gender'] = $data['sexo'];
            $cliente['city'] = $data['ciudad_id'];
            $token = $this->create_token($cliente['email'],$cliente['client_id']);
            $cliente['token'] = $token;

            /*
            $mensaje = $this->get_html_ticket($last_reg);
            $config = Array(        
                'protocol' => 'sendmail',
                'smtp_host' => 'mail.smartticket.com.bo',
                'smtp_port' => 25,
                'smtp_user' => 'vladimirt@smartticket.com.bo',
                'smtp_pass' => 'Piropo9$',
                'smtp_timeout' => '4',
                'mailtype'  => 'html', 
                'charset'   => 'utf-8'
            );
            $this->load->library('email', $config);
            $this->email->set_newline("\r\n");
            $this->email->from('noreply@smartticket.com.bo', 'Smart Ticket');
            $this->email->to($data['email']);
            $this->email->subject('Smart Ticket - Tu ticket electr칩nico');
            $this->email->message($mensaje); 
            $exito = $this->email->send();
            */

            $this->set_response([
                'status' => TRUE,
                'data' => $cliente
            ], REST_Controller::HTTP_OK);
        } else {
            $this->set_response([
                'status' => FALSE,
                'message' => "Error al registrar el cliente"
            ], REST_Controller::HTTP_OK); // CREATED (201) being the HTTP response code
        }
        
    }

    public function register_jump_post()
    {

        if ( ($this->post('device_id') === NULL) )
        {
            // Set the response and exit
            $this->response([
                'status' => FALSE,
                'message' => 'Debe ingresar un Device_Id'
            ], REST_Controller::HTTP_OK); // NOT_FOUND (404) being the HTTP response code
        }

        //$user_agent = $this->get('user_agent');

        /*
        if ( ($this->post('device_id') === NULL) )
        {
            // Set the response and exit
            $this->response([
                'status' => FALSE,
                'message' => 'Debe ingresar un Device Id'
            ], REST_Controller::HTTP_OK); 
        }
        */

        $this->load->database();

        // **** Insert en la tabla Cliente
        $data = array(
            'ciudad_id'  => 6,
            'device_id'  => $this->post('device_id'),
            'user_agent'  => $this->post('user_agent'),
            'fecha_registro' => date('Y-m-d H:i:s')
        );
        $result = $this->db->insert('cliente', $data);
        $last_cli = $this->db->insert_id(); //echo 'last_cli:'.$last_cli;

        // Guardar el User Agent del dispositivo del cliente
        /*
        if ( $user_agent != NULL ) {
            $data = array(
                    'user_agent' => $user_agent
            );
            $this->db->where('id', $last_cli);
            $this->db->update('cliente', $data);
        }
        */

        if ($result) {
            $cliente['client_id'] = $last_cli;
            //$cliente['email'] = $data['email'];
            //$cliente['birthday'] = $data['fecha_nacimiento'];
            //$cliente['gender'] = $data['sexo'];
            $cliente['city'] = $data['ciudad_id'];
            $token = $this->create_token_jump($data['device_id']);
            $cliente['token'] = $token;

            /*
            $mensaje = $this->get_html_ticket($last_reg);
            $config = Array(        
                'protocol' => 'sendmail',
                'smtp_host' => 'mail.smartticket.com.bo',
                'smtp_port' => 25,
                'smtp_user' => 'vladimirt@smartticket.com.bo',
                'smtp_pass' => 'Piropo9$',
                'smtp_timeout' => '4',
                'mailtype'  => 'html', 
                'charset'   => 'utf-8'
            );
            $this->load->library('email', $config);
            $this->email->set_newline("\r\n");
            $this->email->from('noreply@smartticket.com.bo', 'Smart Ticket');
            $this->email->to($data['email']);
            $this->email->subject('Smart Ticket - Tu ticket electr칩nico');
            $this->email->message($mensaje); 
            $exito = $this->email->send();
            */

            $this->set_response([
                'status' => TRUE,
                'data' => $cliente
            ], REST_Controller::HTTP_OK);
        } else {
            $this->set_response([
                'status' => FALSE,
                'message' => "Error al registrar el cliente"
            ], REST_Controller::HTTP_OK); // CREATED (201) being the HTTP response code
        }
        
    }

    public function contactouser_post()
    {
        $cliente_id = $this->post('client_id');
        $email = $this->post('email');
        $ciudad = $this->post('city_id');
        $asunto = $this->post('subject_id');
        $mensaje = $this->post('message');
        $token = $this->post('token');

        if ( ($cliente_id != NULL) && ($token != NULL) ) {
            $valid = $this->validate_token($token,$cliente_id);
            if (!$valid) {
                $this->response([
                    'status' => FALSE,
                    'message' => 'Token inv치lido verificar'
                ], REST_Controller::HTTP_OK);
            }
        } else {
            $this->response([
                'status' => FALSE,
                'message' => 'Token inv치lido'
            ], REST_Controller::HTTP_OK);
        }

        if ( ($this->post('email') === NULL) || ($this->post('city_id') === NULL) )
        {
            // Set the response and exit
            $this->response([
                'status' => FALSE,
                'message' => 'Debe ingresar un email y una ciudad'
            ], REST_Controller::HTTP_OK); // NOT_FOUND (404) being the HTTP response code
        }
        if ( ($this->post('subject_id') === NULL) || ($this->post('message') === NULL) )
        {
            // Set the response and exit
            $this->response([
                'status' => FALSE,
                'message' => 'Debe ingresar una asunto y un mensaje'
            ], REST_Controller::HTTP_OK); // NOT_FOUND (404) being the HTTP response code
        }

        $this->load->database();

        // **** Insert en la tabla Cliente
        $data = array(
            'cliente_id'  => $cliente_id,
            'tipo_usuario' => 1,
            'email'  => $email,
            'mensaje' => $mensaje,
            'fecha' => date('Y-m-d H:i:s'),
            'asunto_id'  => $asunto,
            'ciudad_id' => $ciudad
        );
        $result = $this->db->insert('mensajes_email', $data);
        //$last_cli = $this->db->insert_id(); 

        // **** Insert en la tabla log_servicios
        $datalog = array(
            'cliente_id' => $cliente_id,
            'fecha'  => date('Y-m-d H:i:s'),
            'servicio' => 'contactouser_post',
            'parametros'  => json_encode($_POST),
            'query' => json_encode($data),
            'respuesta' => json_encode($result),
            'registros' => sizeof($result)
        );
        $result_log = $this->db->insert('log_servicios', $datalog);

        // *** Envia correo electronico
        $query = "select * from ciudad where id=".$ciudad;
        $result = $this->db->query($query);
        $ciudades = $result->row_array();
        $query2 = "select * from asunto where id=".$asunto;
        $result2 = $this->db->query($query2);
        $asuntos = $result2->row_array();
        $enviado = $this->send_html_email_msj('Usuario', $email, $ciudades['nombre'], $asuntos['nombre'], $mensaje, $asuntos['email']);

        if ($enviado) {
            $this->set_response([
                'status' => TRUE,
                'message' => "Mensaje enviado!"
            ], REST_Controller::HTTP_OK);
        } else {
            $this->set_response([
                'status' => FALSE,
                'message' => "Error al enviar al mensaje"
            ], REST_Controller::HTTP_OK); // CREATED (201) being the HTTP response code
        }
        
    }

    public function contactocom_post()
    {
        $cliente_id = $this->post('client_id');
        $email = $this->post('email');
        $ciudad = $this->post('city_id');
        $asunto = $this->post('subject_id');
        $mensaje = $this->post('message');
        $token = $this->post('token');

        if ( ($cliente_id != NULL) && ($token != NULL) ) {
            $valid = $this->validate_token($token,$cliente_id);
            if (!$valid) {
                $this->response([
                    'status' => FALSE,
                    'message' => 'Token inv치lido verif'
                ], REST_Controller::HTTP_OK);
            }
        } else {
            $this->response([
                'status' => FALSE,
                'message' => 'Token inv치lido'
            ], REST_Controller::HTTP_OK);
        }

        if ( ($this->post('email') === NULL) || ($this->post('city_id') === NULL) )
        {
            // Set the response and exit
            $this->response([
                'status' => FALSE,
                'message' => 'Debe ingresar un email y una ciudad'
            ], REST_Controller::HTTP_OK); // NOT_FOUND (404) being the HTTP response code
        }
        if ( ($this->post('subject_id') === NULL) || ($this->post('message') === NULL) )
        {
            // Set the response and exit
            $this->response([
                'status' => FALSE,
                'message' => 'Debe ingresar una asunto y un mensaje'
            ], REST_Controller::HTTP_OK); // NOT_FOUND (404) being the HTTP response code
        }

        $this->load->database();

        // **** Insert en la tabla Cliente
        $data = array(
            'cliente_id'  => $cliente_id,
            'tipo_usuario' => 2,
            'email'  => $email,
            'mensaje' => $mensaje,
            'fecha' => date('Y-m-d H:i:s'),
            'asunto_id'  => $asunto,
            'ciudad_id' => $ciudad
        );
        $result = $this->db->insert('mensajes_email', $data);
        //$last_cli = $this->db->insert_id(); 

        // **** Insert en la tabla log_servicios
        $datalog = array(
            'cliente_id' => $cliente_id,
            'fecha'  => date('Y-m-d H:i:s'),
            'servicio' => 'contactocom_post',
            'parametros'  => json_encode($_POST),
            'query' => json_encode($data),
            'respuesta' => json_encode($result),
            'registros' => sizeof($result)
        );
        $result_log = $this->db->insert('log_servicios', $datalog);

        // *** Envia correo electronico
        $query = "select * from ciudad where id=".$ciudad;
        $result = $this->db->query($query);
        $ciudades = $result->row_array();
        $query2 = "select * from asunto where id=".$asunto;
        $result2 = $this->db->query($query2);
        $asuntos = $result2->row_array();
        $enviado = $this->send_html_email_msj('Comercio', $email, $ciudades['nombre'], $asuntos['nombre'], $mensaje, $asuntos['email']);

        if ($enviado) {
            $this->set_response([
                'status' => TRUE,
                'message' => "Mensaje enviado!"
            ], REST_Controller::HTTP_OK);
        } else {
            $this->set_response([
                'status' => FALSE,
                'message' => "Error al enviar al mensaje"
            ], REST_Controller::HTTP_OK); // CREATED (201) being the HTTP response code
        }
        
    }

    public function atms_get()
    {
        
        $this->load->database();

        $cliente_id = $this->get('client_id');
        $banco = $this->get('bank');
        $moneda = $this->get('currency');
        $servicio = $this->get('service');
        $estado = $this->get('state');
        $latitud = $this->get('latitud');
        $longitud = $this->get('longitud');
        $token = $this->get('token');

        if ( ($cliente_id != NULL) && ($token != NULL) ) {
            $valid = $this->validate_token($token,$cliente_id);
            if (!$valid) {
                $this->response([
                    'status' => FALSE,
                    'message' => 'Token inv치lido'
                ], REST_Controller::HTTP_OK);
            }
        } else {
            $this->response([
                'status' => FALSE,
                'message' => 'Token inv치lido'
            ], REST_Controller::HTTP_OK);
        }

        if ( ($latitud === NULL) && ($longitud === NULL) )
        {
            $latitud = -16.4959285;
            $longitud = -68.1333101;
        }

        $query = "select a.id, a.latitud latitude, a.longitud longitude, trim(a.direccion) address, b.nombre bank, m.nombre currency, s.nombre service, a.estado_id state";
        
        /*
        if ($banco != NULL) {
            $query .= ", b.nombre bank";
        }
        if ($moneda != NULL) {
            $query .= ", m.nombre currency";
        }
        if ($servicio != NULL) {
            $query .= ", s.nombre service";
        }
        */

        $query .=  " from atm a, banco b, moneda m, servicio s, estado e";
        //$query .=  " from atm a, banco b, moneda m, servicio s, estado e, banco_nuevo n";

        /*
        if ($banco != NULL) {
            $query .= ", banco b";
        }
        if ($moneda != NULL) {
            $query .= ", moneda m";
        }
        if ($servicio != NULL) {
            $query .= ", servicio s";
        }
        if ($estado != NULL) {
            $query .= ", estado e";
        }
        */

        $query .= " where 1 = 1";

        if ($banco != NULL) {
            $query .= " AND a.banco_id = $banco";
            //$query .= " AND n.id = $banco";
        }
        if ($moneda != NULL) {
            $query .= " AND a.moneda_id = $moneda";
        }
        if ($servicio != NULL) {
            $query .= " AND a.servicio_id = $servicio";
        }
        if ($estado != NULL) {
            $query .= " AND a.estado_id = $estado";
        }

        /*
        
        if (($latitud != NULL) && ($longitud != NULL)) {
            $high_lat = $latitud + 0.05;
            $low_lat = $latitud - 0.05;
            $high_lon = $longitud + 0.03;
            $low_lon = $longitud - 0.03;
            $query .= " AND a.latitud > $low_lat AND a.latitud < $high_lat AND a.longitud > $low_lon AND a.longitud < $high_lon";
        }
        
        */

        
        $query .= " and a.banco_id = b.id
            and a.moneda_id = m.id
            and a.servicio_id = s.id
            and a.estado_id = e.id";

        $query .= " and a.latitud IS NOT NULL and a.longitud IS NOT NULL";
        $query .= " and a.latitud != 0.0 and a.longitud != 0.0";
        
        //echo $query."<br>";

        $result = $this->db->query($query);
        $atms = $result->result_array();


        // **** Insert en la tabla log_servicios
        $data = array(
            'cliente_id' => $cliente_id,
            'fecha'  => date('Y-m-d H:i:s'),
            'servicio' => 'atms_get',
            'parametros'  => json_encode($_GET),
            'query' => $query,
            'respuesta' => json_encode($atms),
            'registros' => sizeof($atms)
        );
        $result_log = $this->db->insert('log_servicios', $data);


        //echo "Records: ".sizeof($atms)."<br>";
        if (!empty($atms)) {
            $this->set_response([
                'status' => TRUE,
                'records' => sizeof($atms),
                'data' => $atms
            ], REST_Controller::HTTP_OK); // OK (200) being the HTTP response code
        } else {
            $this->set_response([
                'status' => FALSE,
                'message' => 'No se encontraron cajeros.'
            ], REST_Controller::HTTP_OK); // NOT_FOUND (404) being the HTTP response code
        }
        
        
        
        
    }

    public function atms2_get()
    {
        
        $this->load->database();

        $cliente_id = $this->get('client_id');
        $banco = $this->get('bank');
        $moneda = $this->get('currency');
        $servicio = $this->get('service');
        $estado = $this->get('state');
        $latitud = $this->get('latitude');
        $longitud = $this->get('longitude');
        $token = $this->get('token');

        if ( ($cliente_id != NULL) && ($token != NULL) ) {
            $valid = $this->validate_token($token,$cliente_id);
            if (!$valid) {
                $this->response([
                    'status' => FALSE,
                    'message' => 'Token inv치lido'
                ], REST_Controller::HTTP_OK);
            }
        } else {
            $this->response([
                'status' => FALSE,
                'message' => 'Token inv치lido'
            ], REST_Controller::HTTP_OK);
        }

        if ( ($latitud === NULL) && ($longitud === NULL) )
        {
            $latitud = -16.4959285;
            $longitud = -68.1333101;
        }

        $query = "select a.id, a.latitud latitude, a.longitud longitude, trim(a.direccion) address, a.estado_id state";
        
        if ($banco != NULL) {
            $query .= ", b.nombre bank";
        }
        if ($moneda != NULL) {
            $query .= ", m.nombre currency";
        }
        if ($servicio != NULL) {
            $query .= ", s.nombre service";
        }
        $query .=  " from atm a";

        if ($banco != NULL) {
            $query .= ", banco b";
        }
        if ($moneda != NULL) {
            $query .= ", moneda m";
        }
        if ($servicio != NULL) {
            $query .= ", servicio s";
        }
        if ($estado != NULL) {
            $query .= ", estado e";
        }
        $query .= " where 1 = 1";

        if ($banco != NULL) {
            $query .= " AND a.banco_id = $banco and a.banco_id = b.id";
        }
        if ($moneda != NULL) {
            $query .= " AND a.moneda_id = $moneda and a.moneda_id = m.id";
        }
        if ($servicio != NULL) {
            $query .= " AND a.servicio_id = $servicio and a.servicio_id = s.id";
        }
        if ($estado != NULL) {
            $query .= " AND a.estado_id = $estado and a.estado_id = e.id";
        }
        
        if (($latitud != NULL) && ($longitud != NULL)) {
            $high_lat = $latitud + 0.3;
            $low_lat = $latitud - 0.3;
            $high_lon = $longitud + 0.2;
            $low_lon = $longitud - 0.2;
            $query .= " AND a.latitud > $low_lat AND a.latitud < $high_lat AND a.longitud > $low_lon AND a.longitud < $high_lon";
        }
        

        /*
        $query .= " and a.banco_id = b.id
            and a.moneda_id = m.id
            and a.servicio_id = s.id
            and a.estado_id = e.id";
        */
        echo $query."<br>";

        $result = $this->db->query($query);
        $atms = $result->result_array();
        //echo "Records: ".sizeof($atms)."<br>";
        if (!empty($atms)) {
            $this->set_response([
                'status' => TRUE,
                'records' => sizeof($atms),
                'data' => $atms
            ], REST_Controller::HTTP_OK); // OK (200) being the HTTP response code
        } else {
            $this->set_response([
                'status' => FALSE,
                'message' => 'No se encontraron cajeros.'
            ], REST_Controller::HTTP_OK); // NOT_FOUND (404) being the HTTP response code
        }
        
        
        
        
    }


    public function news_get()
    {
        
        $this->load->database();
        //$query = $this->db->query('SELECT * FROM evento');
        //$eventos = $query->result_array();

        $cliente_id = $this->get('client_id');
        $token = $this->get('token');
        $new_id = $this->get('new_id');

        if ( ($cliente_id != NULL) && ($token != NULL) ) {
            $valid = $this->validate_token($token,$cliente_id);
            if (!$valid) {
                $this->response([
                    'status' => FALSE,
                    'message' => 'Token inv치lido'
                ], REST_Controller::HTTP_OK);
            }
        } else {
            $this->response([
                'status' => FALSE,
                'message' => 'Token inv치lido'
            ], REST_Controller::HTTP_OK);
        }

        
        if ( $new_id === NULL )
        {
        // If the id parameter doesn't exist return all the news

            //$query = $this->db->query('SELECT id, imagen image, titulo title, descripcion description, DATE_FORMAT(fecha_creacion,"%e %b %Y") date from noticia order by fecha_creacion desc limit 10');
            $query = 'SELECT id, imagen image, titulo title, descripcion description, DATE_FORMAT(fecha_creacion,"%e %b %Y") date from noticia where activo = 1 order by fecha_creacion desc limit 10';
            $result = $this->db->query($query);

            $noticias = $result->result_array();
        } elseif( is_numeric($new_id) ) {
            $query = 'SELECT id, imagen image, titulo title, descripcion description, DATE_FORMAT(fecha_creacion,"%e %b %Y") date from noticia where id='.$new_id.' order by fecha_creacion desc limit 10';
            //$query = $this->db->query('SELECT id, imagen image, titulo title, descripcion description, DATE_FORMAT(fecha_creacion,"%e %b %Y") date from noticia where id='.$new_id.' order by fecha_creacion desc limit 10');
            $result = $this->db->query($query);
            $noticias = $result->row_array();
        } else {
            $this->set_response([
                'status' => FALSE,
                'message' => 'El c칩digo de noticia es incorrecto.'
            ], REST_Controller::HTTP_OK);
        }

        // **** Insert en la tabla log_servicios
        $datalog = array(
            'cliente_id' => $cliente_id,
            'fecha'  => date('Y-m-d H:i:s'),
            'servicio' => 'news_get',
            'parametros'  => json_encode($_GET),
            'query' => $query,
            'respuesta' => json_encode($noticias),
            'registros' => sizeof($noticias)
        );
        $result_log = $this->db->insert('log_servicios', $datalog);

        if (!empty($noticias)) {
            $this->set_response([
                'status' => TRUE,
                'data' => $noticias
            ], REST_Controller::HTTP_OK); // OK (200) being the HTTP response code
        } else {
            $this->set_response([
                'status' => FALSE,
                'message' => 'No se encontraron noticias.'
            ], REST_Controller::HTTP_OK); // NOT_FOUND (404) being the HTTP response code
        }

        
    }

    public function faq_get()
    {
        
        $this->load->database();
        //$query = $this->db->query('SELECT * FROM evento');
        //$eventos = $query->result_array();

        $cliente_id = $this->get('client_id');
        $token = $this->get('token');
        $new_id = $this->get('new_id');

        if ( ($cliente_id != NULL) && ($token != NULL) ) {
            $valid = $this->validate_token($token,$cliente_id);
            if (!$valid) {
                $this->response([
                    'status' => FALSE,
                    'message' => 'Token inv치lido'
                ], REST_Controller::HTTP_OK);
            }
        } else {
            $this->response([
                'status' => FALSE,
                'message' => 'Token inv치lido'
            ], REST_Controller::HTTP_OK);
        }


        // Preguntas frecuentas de Usuarios
        $query = $this->db->query('SELECT * from categoria where tipo_cliente = 1');
        $faqcats_usu = $query->result_array();
        $preguntas_usu = array();
        foreach ($faqcats_usu as $row)
        {
                $pregunta_usu = array();
                $cat_id = $row['id']; //echo 'Cat_id: '.$cat_id;
                $query2 = $this->db->query('SELECT id, titulo title , descripcion decription, fecha_creacion date FROM pregunta WHERE categoria_id = '.$cat_id);
                $faqs_usu = $query2->result_array();
                if (!empty($faqs_usu)) {
                    $pregunta_usu['cat_title']=$row['nombre'];
                    $pregunta_usu['questions']=$faqs_usu;
                    $pregunta_usu['icon']=$row['icono'];
                    $preguntas_usu[] = $pregunta_usu;
                }
        }
        $data['faqs_user'] = $preguntas_usu;

        // Preguntas frecuentas de Usuarios
        $query = $this->db->query('SELECT * from categoria where tipo_cliente = 2');
        $faqcats_com = $query->result_array();

        $preguntas_com = array();
        foreach ($faqcats_com as $row)
        {
                $pregunta_com = array();
                $cat_id = $row['id']; //echo 'Cat_id: '.$cat_id;
                $query2 = $this->db->query('SELECT id, titulo title , descripcion decription, fecha_creacion date FROM pregunta WHERE categoria_id = '.$cat_id);
                $faqs_com = $query2->result_array();
                if (!empty($faqs_com)) {
                    $pregunta_com['cat_title']=$row['nombre'];
                    $pregunta_com['questions']=$faqs_com;
                    $pregunta_com['icon']=$row['icono'];
                    $preguntas_com[] = $pregunta_com;
                }
        }
        $data['faqs_commerce'] = $preguntas_com;

        // **** Insert en la tabla log_servicios
        $datalog = array(
            'cliente_id' => $cliente_id,
            'fecha'  => date('Y-m-d H:i:s'),
            'servicio' => 'faq_get',
            'parametros'  => json_encode($_GET),
            'query' => '',
            'respuesta' => json_encode($data),
            'registros' => sizeof($data)
        );
        $result_log = $this->db->insert('log_servicios', $datalog);

        $this->set_response([
            'status' => TRUE,
            'data' => $data
        ], REST_Controller::HTTP_OK);
        
        
    }

    public function faq2_get()
    {
        
        $this->load->database();
        //$query = $this->db->query('SELECT * FROM evento');
        //$eventos = $query->result_array();

        $cliente_id = $this->get('client_id');
        $token = $this->get('token');
        $new_id = $this->get('new_id');

        if ( ($cliente_id != NULL) && ($token != NULL) ) {
            $valid = $this->validate_token($token,$cliente_id);
            if (!$valid) {
                $this->response([
                    'status' => FALSE,
                    'message' => 'Token inv치lido'
                ], REST_Controller::HTTP_OK);
            }
        } else {
            $this->response([
                'status' => FALSE,
                'message' => 'Token inv치lido'
            ], REST_Controller::HTTP_OK);
        }


        // Preguntas frecuentas de Usuarios
        $query = $this->db->query('SELECT * from categoria where tipo_cliente = 1');
        $faqcats_usu = $query->result_array();
        $preguntas_usu = array();
        foreach ($faqcats_usu as $row)
        {
                $pregunta_usu = array();
                $cat_id = $row['id']; //echo 'Cat_id: '.$cat_id;
                $query2 = $this->db->query('SELECT id, titulo title , descripcion decription, fecha_creacion date FROM pregunta WHERE categoria_id = '.$cat_id);
                $faqs_usu = $query2->result_array();
                if (!empty($faqs_usu)) {
                    $pregunta_usu[$row['nombre']]['questions']=$faqs_usu;
                    $pregunta_usu[$row['nombre']]['icon']=$row['icono'];
                    $preguntas_usu[] = $pregunta_usu;
                }
        }
        $data['faqs_user'] = $preguntas_usu;

        // Preguntas frecuentas de Usuarios
        $query = $this->db->query('SELECT * from categoria where tipo_cliente = 2');
        $faqcats_com = $query->result_array();

        $preguntas_com = array();
        foreach ($faqcats_com as $row)
        {
                $pregunta_com = array();
                $cat_id = $row['id']; //echo 'Cat_id: '.$cat_id;
                $query2 = $this->db->query('SELECT id, titulo title , descripcion decription, fecha_creacion date FROM pregunta WHERE categoria_id = '.$cat_id);
                $faqs_com = $query2->result_array();
                if (!empty($faqs_com)) {
                    $pregunta_com[$row['nombre']]['questions']=$faqs_com;
                    $pregunta_com[$row['nombre']]['icon']=$row['icono'];
                    $preguntas_com[] = $pregunta_com;
                }
        }
        $data['faqs_commerce'] = $preguntas_com;
        $this->set_response([
            'status' => TRUE,
            'data' => $data
        ], REST_Controller::HTTP_OK);
        
        
    }

    public function contactinfo_get()
    {
        
        $this->load->database();

        $cliente_id = $this->get('client_id');
        //$ope = $this->get('operador');
        $token = $this->get('token');

        if ( ($cliente_id != NULL) && ($token != NULL) ) {
            $valid = $this->validate_token($token,$cliente_id);
            if (!$valid) {
                $this->response([
                    'status' => FALSE,
                    'message' => 'Token inv치lido'
                ], REST_Controller::HTTP_OK);
            }
        } else {
            $this->response([
                'status' => FALSE,
                'message' => 'Token inv치lido'
            ], REST_Controller::HTTP_OK);
        }

        //$query = $this->db->query('SELECT whatsapp, callcenter_comercios callcom, callcenter_usuarios callusu, email_comercios emailcom, email_usuarios emailusu, oficina_central centraloff, agencias_fijas agencies, web, facebook from contacto');
        $query = 'SELECT whatsapp, callcenter_comercios callcom, callcenter_usuarios callusu, email_comercios emailcom, email_usuarios emailusu, oficina_central centraloff, agencias_fijas agencies, web, facebook from contacto';
        $result = $this->db->query($query);
        $contactos = $result->row_array();

        // **** Insert en la tabla log_servicios
        $datalog = array(
            'cliente_id' => $cliente_id,
            'fecha'  => date('Y-m-d H:i:s'),
            'servicio' => 'contactinfo_get',
            'parametros'  => json_encode($_GET),
            'query' => $query,
            'respuesta' => json_encode($contactos),
            'registros' => sizeof($contactos)
        );
        $result_log = $this->db->insert('log_servicios', $datalog);

        if (empty($contactos)) {
            $this->set_response([
                'status' => FALSE,
                'message' => 'No se encontraron parametros'
            ], REST_Controller::HTTP_OK); // OK (200) being the HTTP response code
        } else {
            $this->response([
                'status' => TRUE,
                'data' => $contactos
            ], REST_Controller::HTTP_OK); // OK (200) being the HTTP response code
        }
        
    }

    private function send_html_email($email, $newpwd) {

        $template = "
            <h2>GeoEnlace</h2>
            <h3>Nueva clave</h3>
            <p>Esta es su nueva clave: [CLAVE]</p>
        ";
        
        $template=str_replace("[CLAVE]", $newpwd,$template);

        $config = Array(        
            'protocol' => 'sendmail',
            'smtp_host' => 'mail.smartsoluciones.cl',
            'smtp_port' => 25,
            'smtp_user' => 'vladimirt@smartsoluciones.cl',
            'smtp_pass' => '5Kf3sMZqNih9',
            'smtp_timeout' => '4',
            'mailtype'  => 'html', 
            'charset'   => 'utf-8'
        );
        $this->load->library('email', $config);
        $this->email->set_newline("\r\n");
        $this->email->from('noreply@redenlace.com.bo', 'GeoEnlace');
        $this->email->to($email);
        $this->email->subject('GeoEnlace - Su nueva clave');
        $this->email->message($template); 
        $exito = $this->email->send();

        if ($exito) {
            //echo $template;
            return TRUE;
        } else {
            return FALSE;
        }
        
    }

    private function send_html_email_msj($origen, $email, $ciudad, $asunto, $mensaje, $toemail) {
        $toemail = "lquenta@redenlace.com.bo"; //remover
        $template = "
            <h2>GeoEnlace</h2>
            <h3>Nuevo mensaje de un [ORIGEN]</h3>
            <p>Desde: [EMAIL]</p>
            <p>Ciudad: [CIUDAD]</p>
            <p>Asunto: [ASUNTO]</p>
            <p>Mensaje: [MENSAJE]</p>
        ";
        
        $template=str_replace("[ORIGEN]", $origen,$template);
        $template=str_replace("[EMAIL]", $email,$template);
        $template=str_replace("[CIUDAD]", $ciudad,$template);
        $template=str_replace("[ASUNTO]", $asunto,$template);
        $template=str_replace("[MENSAJE]", $mensaje,$template);

        $query = "select * from parametros";
        $result = $this->db->query($query);
        $params = $result->row_array();

        $params['email_user']=''; //remover
        $params['email_pwd']=''; //remover

        $protocol='mail';//='mail' //REMOVER

        $config = Array(        
            'protocol' => $protocol,
            'smtp_host' => $params['email_host'],
            'smtp_port' => $params['email_port'],
            'smtp_user' => $params['email_user'],
            'smtp_pass' => $params['email_pwd'],
            'smtp_timeout' => '4',
            'mailtype'  => 'html', 
            'charset'   => 'utf-8'
        );



        $this->load->library('email', $config);
        $this->email->set_newline("\r\n");
        $this->email->from('lquenta@redenlace.com.bo', 'GeoEnlace');
        $this->email->to($toemail);
        $this->email->subject('GeoEnlace - Nuevo mensaje');
        $this->email->message($template); 
        $exito = $this->email->send();
        var_dump($this->email);
        if ($exito) {
            //echo $template;
            return TRUE;
        } else {
            return FALSE;
        }
        
    }


    
}
